#!/usr/bin/bash

PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

if [[ "${1}" = "-s" ]]; then
  sleep $[ ( ( $RANDOM % 20 ) + 1 ) * 60 ]
fi

NEXTCLOUD='https://nextcloud.example.com'
FOLDER='Rocket.Chat'
USER='nextcloud-username'
PASSWORD='nextcloud-password'

DATE=$(date '+%Y%m%d')
YESTERDAY=$(TZ=GMT+24 date '+%Y%m%d')
BACKUP_FOLDER="/var/local/mongodump"
BACKUP_FILE="${DATE}_rocketchat.mongodump"
BACKUP_EXTERNAL_UPLOAD="${DATE}_rocketchat_upload.tar.bz2"
HOSTNAME="$(hostname)"

mkdir -p "${BACKUP_FOLDER}"
cd "${BACKUP_FOLDER}"

# echo "*** Stop Rocket.Chat for backup"
# systemctl stop rocketchat
# sleep 5

echo "*** Create MonoDB backup"
mongodump --quiet --out="${BACKUP_FOLDER}/${BACKUP_FILE}"

# echo "*** Start Rocket.Chat after backup"
# systemctl start rocketchat

echo "*** Create MongoDB backup.tar.bz2"
tar cjf "${BACKUP_FILE}.tar.bz2" "./${BACKUP_FILE}"
rm -rf "${BACKUP_FOLDER}/${BACKUP_FILE}"

echo "*** Create shasum from backup.tar.bz2"
sha1sum "${BACKUP_FILE}.tar.bz2" > "${BACKUP_FILE}.tar.bz2.shasum"

if [[ -d /data ]]; then
  echo "*** Create nfs folder structure"
  mkdir -p "/data/${HOSTNAME}/mongodb"
  echo "*** Copy file: ${BACKUP_FILE}.tar.bz2"
  cat "${BACKUP_FOLDER}/${BACKUP_FILE}.tar.bz2" | openssl enc -pbkdf2 -k "${HOSTNAME}" -nosalt > "/data/${HOSTNAME}/mongodb/${BACKUP_FILE}.tar.bz2.enc"
  cat "${BACKUP_FOLDER}/shasum" >> "/data/${HOSTNAME}/shasum"
  if [[ -d /var/www/rocket/upload ]]; then
    echo "*** Create external rc-upload.tar.bz2"
    if [[ -d /data ]]; then
      (
        mkdir -p "/data/${HOSTNAME}/upload"
        cd /var/www/rocket
        tar cjf "/data/${HOSTNAME}/upload/${BACKUP_EXTERNAL_UPLOAD}" "./upload"
      )
    fi
  fi
  # end of nfs backup
else
  if [[ -d /var/www/rocket/upload ]]; then
    echo "*** Create backup of filesystem uploads"
    (
      cd /var/www/rocket
      tar cjf "${BACKUP_FOLDER}/${BACKUP_EXTERNAL_UPLOAD}" "./upload"
      sha1sum "${BACKUP_FOLDER}/${BACKUP_EXTERNAL_UPLOAD}" > "${BACKUP_FOLDER}/${BACKUP_EXTERNAL_UPLOAD}.shasum"
    )
  fi
fi

# get all asset names and store them in a file
if [[ -x /usr/bin/mongosh ]]; then
(
cd "${BACKUP_FOLDER}"
/usr/bin/mongosh rocket --quiet << 'EOF' > "${DATE}_upload_asset_names.json"
DBQuery.shellBatchSize = 300000;
db.getCollection('rocketchat_uploads').find({},{name:1});
EOF
)
fi

# backup to Nextcloud?
if [[ -n "${NEXTCLOUD}" ]]; then
  echo "*** Create Nextcloud folder structure"
  curl -s -u "${USER}:${PASSWORD}" -X MKCOL "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}" > /dev/null
  curl -s -u "${USER}:${PASSWORD}" -X MKCOL "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}" > /dev/null
  curl -s -u "${USER}:${PASSWORD}" -X MKCOL "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}" > /dev/null

  echo "*** Upload shasum file"
  curl -s -u "${USER}:${PASSWORD}" -T "${BACKUP_FOLDER}/${BACKUP_FILE}.tar.bz2.shasum" "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}/${BACKUP_FILE}.tar.bz2.shasum"

  if [[ $(stat --printf="%s" "${BACKUP_FILE}.tar.bz2") -gt 524288000 ]]; then
    mkdir "split"
    (
      cd "split"
      echo "*** Split files before upload"
      split -b 512m "../${BACKUP_FILE}.tar.bz2" "${BACKUP_FILE}_tar_bz2_"
      for file in ./*; do
        status=1
        counter=0
        while [[ $status -eq 1 ]]; do
          echo "*** Upload file: ${file}"
          http_code=$(curl -s -u "${USER}:${PASSWORD}" -T "${file}" -o /dev/null -w "%{http_code}" "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}/${file}")
          counter=$[counter + 1]
          [[ $http_code -ge 200 && $http_code -lt 300 ]] && status=0
          [[ $counter -gt 3 ]] && status=0
        done
      done
    )
    echo "*** Cleanup split-folder"
    rm -rf "split" || true
  else
    status=1
    counter=0
    while [[ $status -eq 1 ]]; do
      echo "*** Upload file: ${BACKUP_FILE}.tar.bz2"
      http_code=$(curl -s -u "${USER}:${PASSWORD}" -T "${BACKUP_FOLDER}/${BACKUP_FILE}.tar.bz2" -o /dev/null -w "%{http_code}" "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}/${BACKUP_FILE}.tar.bz2")
      counter=$[counter + 1]
      [[ $http_code -ge 200 && $http_code -lt 300 ]] && status=0
      [[ $counter -gt 3 ]] && status=0
    done
  fi
  
  if [[ -d /var/www/rocket/upload ]]; then
    # upload fileystem uploads to nextcloud too
    status=1
    counter=0
    while [[ $status -eq 1 ]]; do
      echo "*** Upload external rc-upload: ${BACKUP_EXTERNAL_UPLOAD}"
      http_code=$(curl -s -u "${USER}:${PASSWORD}" -T "${BACKUP_EXTERNAL_UPLOAD}" -o /dev/null -w "%{http_code}" "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}/${BACKUP_EXTERNAL_UPLOAD}")
      counter=$[counter + 1]
      [[ $http_code -ge 200 && $http_code -lt 300 ]] && status=0
      [[ $counter -gt 3 ]] && status=0
    done
    echo "*** Upload shasum file"
    curl -s -u "${USER}:${PASSWORD}" -T "${BACKUP_FOLDER}/${BACKUP_EXTERNAL_UPLOAD}.shasum" "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${DATE}/${BACKUP_EXTERNAL_UPLOAD}.shasum"
    rm -rf "${BACKUP_EXTERNAL_UPLOAD}" 2>/dev/null
  fi
  
  echo "*** Delete backup from yesterday"
  curl -s -u "${USER}:${PASSWORD}" -X DELETE "${NEXTCLOUD}/remote.php/dav/files/${USER}/${FOLDER}/${HOSTNAME}/${YESTERDAY}" > /dev/null
  rm -rf "${BACKUP_FOLDER}/${YESTERDAY}_rocketchat.mongodump.tar.bz2" 2>/dev/null
  # end of nextcloud backup
else
  echo "*** Skip nextcloud backup cause of missing cresentials"
fi

if [[ -d /data ]]; then
  echo "*** Cleanup old backups on share"
  ls -1dt /data/${HOSTNAME}/mongodb/* | tail -n +8 | xargs rm -f
  ls -1dt /data/${HOSTNAME}/upload/*  | tail -n +8 | xargs rm -f
else
  echo "*** Cleanup old backups on local disk"
  ls -1dt /var/local/mongodump/*rocketchat.mongodump.tar.bz2 | tail -n +2 | xargs rm -rf || true
  ls -1dt /var/local/mongodump/*_rocketchat_upload.tar.bz2 | tail -n +2 | xargs rm -rf || true
  ls -1dt /var/local/mongodump/*rocketchat.mongodump.tar.bz2.shasum | tail -n +2 | xargs rm -rf || true
  ls -1dt /var/local/mongodump/*_rocketchat_upload.tar.bz2.shasum | tail -n +2 | xargs rm -rf || true 
fi

exit 0